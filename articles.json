[{"intro":"<p>Node.js是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。它让JS脱离了浏览器的限制，在更多的平台上运行。近几年是越来越火。让它这么火的原因有哪些呢？</p>\n<ul>\n<li>基于C++的Chrome V8引擎让它速度非常快</li>\n<li>事件循环与异步I/0让它可以轻松处理高并发</li>\n<li>统一技术栈</li>\n<li>服务端渲染（同构Web应用）</li>\n<li>...</li>\n</ul>\n<p>本文主要就第二点谈谈，什么是事件循环与异步I/O，以及他们是怎样处理高并发的。</p>\n","content":"<p>Node.js是能够在服务器端运行JavaScript的开放源代码、跨平台JavaScript运行环境。它让JS脱离了浏览器的限制，在更多的平台上运行。近几年是越来越火。让它这么火的原因有哪些呢？</p>\n<ul>\n<li>基于C++的Chrome V8引擎让它速度非常快</li>\n<li>事件循环与异步I/0让它可以轻松处理高并发</li>\n<li>统一技术栈</li>\n<li>服务端渲染（同构Web应用）</li>\n<li>...</li>\n</ul>\n<p>本文主要就第二点谈谈，什么是事件循环与异步I/O，以及他们是怎样处理高并发的。</p>\n<h2 id=\"什么是异步\">什么是异步</h2>\n<p>计算机领域中的同步和异步的概念和我们平时生活中的同步和异步是不一样的：</p>\n<pre><code>同步就是整个处理过程顺序执行，当各个过程都执行完毕，并返回结果。是一种线性执行的方式，执行的流程不能跨越。\n\n异步则是只是发送了调用的指令，调用者无需等待被调用的方法完全执行完毕；而是继续执行下面的流程。是一种并行处理的方式，不必等待一个程序执行完，可以执行其它的任务</code></pre><p>我们经常听到的Ajax请求的A就是异步(Asynchronous)的意思。浏览器中JavaScript在单线程上执行，而且与UI渲染共用一个线程。这意味着在js执行的时候，UI渲染和响应是处于停滞状态的。这就是为什么我们用js进行大量计算时页面会卡主。</p>\n<p>如果前端发请求是通过同步的方式，那么js需要等到后端返回数据后才能继续执行。这期间UI将停顿，无法响应用户的交互行为。但是通过发送异步请求，js和UI渲染可以继续执行，等收到响应的数据执行回调即可。用户体验更佳。</p>\n<h2 id=\"什么是io\">什么是I/O</h2>\n<p>I/O在计算机中指Input/Output，也就是输入和输出。比如磁盘I/O，网络I/O等进行数据交换的操作。</p>\n<h3 id=\"什么是异步io\">什么是异步I/O</h3>\n<p>计算机在发展过程中将组件进行了抽象，分为I/O设备和计算设备。通常CPU与I/O是可以并行的。假如有一下代码：</p>\n<pre><code><span class=\"hljs-keyword\">var</span> result = <span class=\"hljs-keyword\">db</span>.<span class=\"hljs-keyword\">query</span>(<span class=\"hljs-string\">\"select * from T\"</span>);\n<span class=\"hljs-comment\">// use result</span></code></pre><p>思考一下执行这行SQL的时候，其实是调用了I/O操作，那么在数据返回之前，CPU在干嘛？是不是空闲了。</p>\n<p>假如处理一个请求需要来自查询两份数据，第一个耗时M，第二个耗时N，采用同步的方式，代码如下：</p>\n<pre><code><span class=\"hljs-comment\">// 消费时间为M</span>\n<span class=\"hljs-selector-tag\">getData</span>(<span class=\"hljs-string\">'from_db'</span>);\n<span class=\"hljs-comment\">// 消费时间为N</span>\n<span class=\"hljs-selector-tag\">getData</span>(<span class=\"hljs-string\">'from_remote_api'</span>);</code></pre><p>第一个资源获取后才会获取第二个资源，总耗时 M+N。但是如果采用异步的方式：</p>\n<pre><code>getData(<span class=\"hljs-string\">'from_db'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n<span class=\"hljs-comment\">// 消费时间为M</span>\n});\n\ngetData(<span class=\"hljs-string\">'from_remote_api'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(result)</span> </span>{\n<span class=\"hljs-comment\">// 消费时间为N</span>\n});</code></pre><p>第一个资源并不会阻塞第二个资源的获取，总耗时max(M, N)。随着应用越来越复杂，同步和异步的优劣会越来越明显。</p>\n<p>I/O是昂贵的，<strong>异步I/O能更快的响应资源</strong>。</p>\n<p><img src=\"https://xiao555.netlify.com/28b0c513315b4c13a96a46f7ac7bac6b_image.png\" alt=\"28b0c513315b4c13a96a46f7ac7bac6b_image.png\"></p>\n<p>官方有个小例子也体现了异步的高效：<a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">https://nodejs.org/en/docs/guides/simple-profiling/</a></p>\n<p>在登录注册的逻辑中，我们经常会用到加密算法，这种复杂计算是很耗CPU的。上面的文章提到使用同步代码进行加密计算时，每秒处理的请求数是5，而改成了异步代码进行加密计算时，每秒处理的请求数变成四舍五入就是20，提升了4倍的性能。</p>\n<h2 id=\"异步io的实现\">异步I/O的实现</h2>\n<p>异步I/O并非Node原创。下面我们看一下操作系统对异步I/O的支持情况。</p>\n<h3 id=\"阻塞与非阻塞\">阻塞与非阻塞</h3>\n<p>在讨论同步/异步时，我们也尝尝听到阻塞和非阻塞，从效果上讲异步和非阻塞好像是一回事。但是对于计算机内核来说，它们是两回事。操作系统内核对于I/O只有两种方式：阻塞与非阻塞。</p>\n<p>阻塞I/O是调用之后一定要等到数据返回，这个调用才结束。</p>\n<p><img src=\"https://xiao555.netlify.com/4d19e938b5644a81924735fca57a4723_image.png\" alt=\"4d19e938b5644a81924735fca57a4723_image.png\"></p>\n<p>阻塞I/O造成CPU等待I/O, 浪费等待时间，CPU的处理能力不能得到充分利用。为了提高性能，内核提供了非阻塞I/O。</p>\n<p><img src=\"https://xiao555.netlify.com/803ca124254e42198715f684acc85f1e_image.png\" alt=\"803ca124254e42198715f684acc85f1e_image.png\"></p>\n<p>操作系统对计算机进行了抽象，将所有输入输出设备抽象为文件。内核在进行文件I/O操作时，通过文件描述符(fd)进行管理。进行I/O调用时，先打开文件描述符，再根据文件描述符去实现文件的数据读写。</p>\n<p>非阻塞I/O在调用后不带数据立即返回，CPU可以继续处理其他事务，提升了性能。但带来的问题是，我们并不知道I/O是否完成。为了获取完整的数据，程序需要重复调用I/O来确认，即<strong>轮询</strong>。</p>\n<p>现有的轮询技术主要有：read, select, poll和epoll。</p>\n<p>read是最原始，性能最低的一种，通过重复调用来检查I/O状态获取完整的数据。在得到数据前，CPU一直耗在等待上。</p>\n<p><img src=\"https://xiao555.netlify.com/30ebef2fb9304bf2b07bf3680ab9e7b0_image.png\" alt=\"30ebef2fb9304bf2b07bf3680ab9e7b0_image.png\"></p>\n<p>select在read基础上进行了改进，可以同时监听多个文件描述符，进行非阻塞调用后，通过不断遍历每个文件描述符上的事件状态来判断I/O是否完成，属于多路复用I/O的一种。它的限制是状态存储在一个1024长度的数组中，所以最多同时检查1024个文件描述符。</p>\n<p><img src=\"https://xiao555.netlify.com/e4f98fc94dc6422b944cd208e5c6c94f_image.png\" alt=\"e4f98fc94dc6422b944cd208e5c6c94f_image.png\"></p>\n<p>poll跟sellect类似，进行了一些改进，采用链表的方式突破数组的长度限制。但是poll和select都需要遍历，当文件描述符比较多的时候，性能比较低。</p>\n<p>epoll是Linux下效率最高的I/O事件通知机制，如果没有检查到I/O事件，会进行休眠，直到事件将它唤醒。利用了事件通知，执行回调的方式，而不是遍历查询，不会浪费CPU，执行效率高。但是如果I/O事件并不多的情况下，epoll并非性能最高的，毕竟实现事件通知机制也会有一定消耗。</p>\n<p><img src=\"https://xiao555.netlify.com/eac966fd47684d69a005ff291ee1fb9f_image.png\" alt=\"eac966fd47684d69a005ff291ee1fb9f_image.png\"></p>\n<p>如果要形象的描述一下这几个轮询，可以理解为公司有好几个需求(I/O事件)需要开发，每个需求分配了一个产品(线程)，每个需求交给一个开发去完成(进行I/O调用)，每个产品需要不断的去问对应的开发需求(I/O调用)是否完成，这就是read。</p>\n<p>后来公司引入了jira统一管理需求，把这几个需求在jira上都交给一个产品(线程)去管理，每个需求还是交给一个开发去完成(进行I/O调用)，但只需要这个产品去不断查看每个jira的状态即可(遍历)，这种就是select和poll的方式。</p>\n<p>再后来公司又启用了企业微信，开发开发完后直接在企业微信上通知(事件通知)产品开发完了，不用产品一个一个去查看状态了，这种就是epoll的方式。</p>\n<h3 id=\"异步io的理想与现实\">异步I/O的理想与现实</h3>\n<p>我们期望的异步I/O是应用程序发起I/O调用后，无须通过遍历或者事件通知等方式轮询，可以直接处理后续逻辑，只需要在I/O完成后将数据返回给应用程序执行回调。</p>\n<p><img src=\"https://xiao555.netlify.com/3b9cb346c07149638576a41fabff06f6_image.png\" alt=\"3b9cb346c07149638576a41fabff06f6_image.png\"></p>\n<p>而现实中的异步I/O大多是通过线程池的方式来间接实现的。让部分线程进行阻塞I/O或者非阻塞I/O加轮询技术来完成数据获取，让一个线程进行计算处理，通过线程之间的通信进行数据传递，可以轻松实现异步I/O。</p>\n<p><img src=\"https://xiao555.netlify.com/8f524f1ae111459f99a01b58674b6bd9_image.png\" alt=\"8f524f1ae111459f99a01b58674b6bd9_image.png\"></p>\n<h3 id=\"跨平台的异步io实现\">跨平台的异步I/O实现</h3>\n<p>Node是跨平台的，上面我们说的就是Unix系统，在Windows平台上，本身提供了一个理想的异步I/O——IOCP，虽然它内部仍然是线程池的原理，只不过这些线程池是有系统内核管理的而非应用程序。Node提供了libuv作为抽象封装层，兼容了不同平台间的差异。</p>\n<p><img src=\"https://xiao555.netlify.com/de7a832ab9af4b6dad29b499873f0efb_image.png\" alt=\"de7a832ab9af4b6dad29b499873f0efb_image.png\"></p>\n<p>所以虽然我们常说Node是单线程的，其实只是说js执行在单线程中，内部完成I/O任务的另有线程池。</p>\n<h3 id=\"node的异步io\">Node的异步I/O</h3>\n<p>介绍完异步I/O的实现，还要说一下Node的执行模型，完成整个异步I/O的有事件循环，观察者和请求对象等。</p>\n<h4 id=\"事件循环\">事件循环</h4>\n<p>在进程启动时，Node便会创建一个类似于while(true)的循环，每执行一次循环体的过程我们称为Tick。每个Tick的过程就是查看是否有事件待处理，如果有，就取出事件及其相关的回调函数。如果存在关联的回调函数，就执行它们。然后进入下个循环，如果不再有事件处理，就退出进程。</p>\n<p><img src=\"https://xiao555.netlify.com/bdecb4903b1e4bd9b892a1e82a0644b4_image.png\" alt=\"bdecb4903b1e4bd9b892a1e82a0644b4_image.png\"></p>\n<h4 id=\"观察者\">观察者</h4>\n<p>在每个Tick的过程中，如何判断是否有事件需要处理呢？这里就要引入观察者的概念，每个事件循环中有一个或多个观察者，而判断是否有事件要处理就是向这些观察者询问。</p>\n<p>在浏览器中，事件可以能来自用户交互行为，比如点击一个按钮等等，都有对应的观察者。在Node中，事件可能来自网络请求，文件I/O等，这些事件对应的观察者有文件I/O观察者，网络I/O观察者等。</p>\n<p>事件循环是一个典型的生产者/消费者模型。异步I/O、网络请求等则是事件的生产者，源源不断为Node提供不同类型的事件，这些事件被传递到对应的观察者那里，事件循环则从观察者那里取出事件并处理。</p>\n<h4 id=\"请求对象\">请求对象</h4>\n<p>异步I/O的回调函数不是由我们开发者调用的。从js发起调用到内核执行完I/O操作的过渡过程中，存在一种中间产物，叫做请求对象。</p>\n<p>以<code>fs.open()</code>为例，从js调用Node的核心模块(fs)，核心模块调用C++内建模块，内建模块通过libuv进行系统调用。libuv进行系统调用过程中，创建了一个请求对象，从js层传入的参数和当前方法都被封装在这个请求对象中，回调函数也设置在这个对象的oncomplete_sym属性上。对象包装完毕后，就被推入线程池中等待执行。</p>\n<p>至此，js调用立即返回，由JavaScript层面发起的异步调用的第一阶段就此结束。 JavaScript线程可以继续执行当前任务的后续操作。当前的I/O操作在线程池中等待执行，不管它是否阻塞I/O，都不会影响到JavaScript线程的后续执行，如此就达到了异步的目的。</p>\n<p>请求对象是异步I/O过程中的重要中间产物，所有的状态都保存在这个对象中，包括送入线程池等待执行以及I/O操作完毕后的回调处理。</p>\n<h4 id=\"执行回调\">执行回调</h4>\n<p>组装好请求对象、送入I/O线程池等待执行，实际上完成了异步I/O的第一部分，回调通知是第二部分。</p>\n<p>在事件循环的每次Tick过程中，也存在I/O观察者去检查线程池中是否有执行完的请求，如果存在，会将请求对象加到I/O观察者的队列中，然后将其当做事件处理。</p>\n<p>I/O观察者回调函数的行为就是取出请求对象的result属性作为参数，取出oncomplete_sym属性作为方法，然后调用执行，以此达到调用JavaScript中传入的回调函数的目的。</p>\n<p>以Windows平台上的IOCP为例，整个异步I/O的流程大概是：</p>\n<p><img src=\"https://xiao555.netlify.com/61ad2742e89c4c249712ce65c4e387ae_image.png\" alt=\"61ad2742e89c4c249712ce65c4e387ae_image.png\"></p>\n<p>事件循环、观察者、请求对象、I/O线程池这四者共同构成了Node异步I/O模型的基本要素。</p>\n<h2 id=\"事件驱动\">事件驱动</h2>\n<p>事件驱动是在持续的事物管理过程中，由当前时间节点上出现的事件引起的调用可用资源执行相关任务，解决问题，防止事物堆积的一种策略。前面介绍异步的实现原理也基本勾勒处理事件驱动的实质，即通过主循环加事件触发的方式来运行程序。基于Node构建的Web服务器也是通过事件驱动来处理请求的。</p>\n<p><img src=\"https://xiao555.netlify.com/9142627df5b34afcbc6450c11f0ea42a_image.png\" alt=\"9142627df5b34afcbc6450c11f0ea42a_image.png\"></p>\n<p>下面为几种经典的服务器模型</p>\n<ul>\n<li>同步式。对于同步式的服务，一次只能处理一个请求，并且其余请求都处于等待状态。</li>\n<li>每进程/每请求。为每个请求启动一个进程，这样可以处理多个请求，但是它不具备扩展性，因为系统资源只有那么多。</li>\n<li>每线程/每请求。为每个请求启动一个线程来处理。尽管线程比进程要轻量，但是由于每个线程都占用一定内存，当大并发请求到来时，内存将会很快用光，导致服务器缓慢。</li>\n</ul>\n<p>多线程优点是可以高效利用多核CPU，缺点是创建线程需要消耗内存，CPU在线程之间进行上下文切换需要花费时间，还有最头痛的状态同步问题等等。Apache采用的是每线程/每请求的方式，而Nginx则是事件驱动，我们看一下这两个的性能比较：</p>\n<p><img src=\"https://xiao555.netlify.com/67bbbba6a2d34116a2bee74664c9d606_image.png\" alt=\"67bbbba6a2d34116a2bee74664c9d606_image.png\">\n<img src=\"https://xiao555.netlify.com/34e201b99a0f4197b9b66fd53af3886c_image.png\" alt=\"34e201b99a0f4197b9b66fd53af3886c_image.png\"></p>\n<p>我们可以看到，随着并发数的增加，nginx每秒处理的请求数更多(省去了多线程上下文切换的消耗)，占用的内存基本不变，apache内存线性增加(每个线程占用一定的内存)。所以事件驱动在处理高并发时性能是非常高的。</p>\n<p>参考链接：\n《深入浅出Node.js》\n<a href=\"https://blog.csdn.net/shiyong1949/article/details/80854656\">https://blog.csdn.net/shiyong1949/article/details/80854656</a>\n<a href=\"https://nodejs.org/en/docs/guides/simple-profiling/\">https://nodejs.org/en/docs/guides/simple-profiling/</a>\n<a href=\"https://www.zhihu.com/question/28594409\">https://www.zhihu.com/question/28594409</a>\n<a href=\"http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf\">http://s3.amazonaws.com/four.livejournal/20091117/jsconf.pdf</a></p>\n","title":"深入浅出Node.js之事件循环与异步I/O","tags":["Node.js"],"slug":"in-depth-explanation-of-the-event-loop-and-asynchronous-i%2Fo-of-node.js","createDate":1575367200000,"id":"in-depth-explanation-of-the-event-loop-and-asynchronous-i%2Fo-of-node.js","thumb":"https://images.unsplash.com/photo-1580337603547-6209ef255d26?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近做大作业需要研究一下Node.js，需要了解node与mongoDB的链接，前后端的通信，后端的逻辑结构等，怎么快速上手呢？那就做个聊天室吧。</p>\n","content":"<p>最近做大作业需要研究一下Node.js，需要了解node与mongoDB的链接，前后端的通信，后端的逻辑结构等，怎么快速上手呢？那就做个聊天室吧。</p>\n<h2 id=\"安装nodejs和mongodb\">安装Node.JS和MongoDB</h2>\n<p>Node.js就不多说了，MongoDB可以看我上一篇<a href=\"http://www.xiao555.club/2016/04/30/win7%20%E5%AE%89%E8%A3%85MongoDB/\">博客</a></p>\n<h2 id=\"构建express项目\">构建Express项目</h2>\n<p>找一个合适的地方：</p>\n<pre><code class=\"language-bash\"><span class=\"hljs-attr\">mkdir</span> <span class=\"hljs-string\">chatroom</span>\n\n<span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">chatroom</span>\n\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install express</span>\n\n<span class=\"hljs-attr\">express</span> <span class=\"hljs-string\">-e  //-e 是用ejs作为模板引擎</span>\n\n<span class=\"hljs-attr\">npm</span> <span class=\"hljs-string\">install //安装依赖，目录在package.json中</span>\n</code></pre>\n<p>这样就创建好了，结构如下：</p>\n<pre><code class=\"language-bash\">-<span class=\"ruby\"> chatroom\n</span>\n    -<span class=\"ruby\"> bin\n</span>        -<span class=\"ruby\"> www           /<span class=\"hljs-regexp\">/配置端口启动文件\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> node_modules        /</span><span class=\"hljs-regexp\">/下载的模块\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> express\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> public            /</span><span class=\"hljs-regexp\">/静态资源\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> images\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> javascripts\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> stylesheets\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> routes            /</span><span class=\"hljs-regexp\">/后端逻辑、路由\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> users.js\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> views                /</span><span class=\"hljs-regexp\">/视图\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> error.ejs\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.ejs\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> app.js             /</span><span class=\"hljs-regexp\">/入口文件，相当于main();\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> package.json         /</span><span class=\"hljs-regexp\">/配置信息</span></span></code></pre>\n<p>我按照个人习惯做一些调整</p>\n<pre><code>-<span class=\"ruby\"> chatroom\n</span>\n    -<span class=\"ruby\"> node_modules        /<span class=\"hljs-regexp\">/下载的模块\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> express\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> public            /</span><span class=\"hljs-regexp\">/静态资源\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> img\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> css\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> routes            /</span><span class=\"hljs-regexp\">/后端逻辑、路由\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.js\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> users.js\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> views                /</span><span class=\"hljs-regexp\">/视图\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> error.ejs\n</span></span>        -<span class=\"ruby\"><span class=\"hljs-regexp\"> index.ejs\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> app.js             /</span><span class=\"hljs-regexp\">/入口文件，相当于main();\n</span></span>    -<span class=\"ruby\"><span class=\"hljs-regexp\"> package.json         /</span><span class=\"hljs-regexp\">/配置信息</span></span></code></pre><p>我把public目录下目录改一下名称，www文件删了，用app.js作为启动文件，就需要修改一下app.js：</p>\n<pre><code class=\"language-javascript\">var <span class=\"hljs-keyword\">debug</span> = require(<span class=\"hljs-string\">'debug'</span>)(<span class=\"hljs-string\">'chat'</span>);\n//var users = require(<span class=\"hljs-string\">'./routes/users'</span>);    //单页面不需要这个\n\napp.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">'port'</span>, process.env.PORT || <span class=\"hljs-number\">3000</span>);\n\nvar <span class=\"hljs-keyword\">server</span> = app.<span class=\"hljs-keyword\">listen</span>(app.<span class=\"hljs-keyword\">get</span>(<span class=\"hljs-string\">'port'</span>), <span class=\"hljs-keyword\">function</span>(){\n  <span class=\"hljs-keyword\">debug</span>(<span class=\"hljs-string\">'Express server listening on port '</span> + <span class=\"hljs-keyword\">server</span>.address().port);\n})\n\n//app.use(<span class=\"hljs-string\">'/users'</span>, users);</code></pre>\n<p>增加，注释这些后，运行 <code>DEBUG=chatroom &amp; node app.js</code> 或 <code>node app.js</code> ,然后浏览器打开<a href=\"127.0.0.1:3000\">127.0.0.1:3000</a>,如下图所示，就说明配置好了</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f3fsnv448uj311y0kg0vk.jpg\" alt=\"\"></p>\n<h2 id=\"实现前端页面\">实现前端页面</h2>\n<p>这个没什么好说的，修改views目录下的index.ejs文件，效果如下：</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f3ftv2386qj311y0kg0wl.jpg\" alt=\"\"></p>\n<h2 id=\"数据库设计\">数据库设计</h2>\n<p>注意使用数据库前一定要先开启mongodb服务！</p>\n<p>安装 mongodb 和 mongoose 模块：</p>\n<pre><code class=\"language-bash\">npm <span class=\"hljs-keyword\">install</span> mongodb mongoose</code></pre>\n<p>在主目录下新建chat_server.js :</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-comment\">//连接数据库</span>\n<span class=\"hljs-keyword\">var</span> db = mongoose.createConnection(<span class=\"hljs-string\">'localhost'</span>,<span class=\"hljs-string\">'chatroom'</span>);\ndb.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n<span class=\"hljs-keyword\">var</span> Schema = mongoose.Schema;\n\n<span class=\"hljs-comment\">//聊天记录表</span>\n<span class=\"hljs-keyword\">var</span> ChatSchema = <span class=\"hljs-keyword\">new</span> Schema({\n    <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">time</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">String</span>\n});\n<span class=\"hljs-keyword\">var</span> ChatModel = db.model(<span class=\"hljs-string\">'chats'</span>,ChatSchema);\n\n\n<span class=\"hljs-comment\">// 这里的listen函数在 app.js 文件中被调用</span>\nexports.listen = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_server</span>)</span>{\n    <span class=\"hljs-keyword\">return</span> io.listen(_server);\n}</code></pre>\n<p>在app.js中增加：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-selector-tag\">require</span>(<span class=\"hljs-string\">'./chat\\_server'</span>)<span class=\"hljs-selector-class\">.listen</span>(server);</code></pre>\n<h2 id=\"前后端通信socketio\">前后端通信Socket.io</h2>\n<p>借用这篇<a href=\"http://my.oschina.net/voler/blog/626226?fromerr=UumMewCx\">博客</a>里讲的介绍一下socket.io：</p>\n<p>首先先简单讲解下Socket.io的原理. 操作系统有一个非常伟大的设计就是轮询机制,而Node.js中的callback机制正是基于此机制:</p>\n<p><img src=\"https://xiao555.netlify.com/084929_dx2L_1017135.png\" alt=\"\"></p>\n<p>JS的异步编程就是这么来的.但是对于类似聊天这种应用,使用轮询机制明显不合理.轮询机制在于你触发了一个事件后异步处理,但这里异步本身就是硬伤,毕竟聊天要实时的.</p>\n<p>而Node.js中有另外一种伟大的模型: 观察者模式. 即我就一直监听,监听到的某个事件后,执行相应的处理函数.</p>\n<p><img src=\"https://xiao555.netlify.com/084956_5TlW_1017135.png\" alt=\"\"></p>\n<h3 id=\"举个栗子\">举个栗子</h3>\n<p>在chat_server.js中添加：</p>\n<pre><code class=\"language-javascript\">var io = require('socket.io')<span class=\"hljs-literal\">()</span>;\nvar xssEscape = require('xss-escape');\n\nvar nickname_list = <span class=\"hljs-literal\">[]</span>;\n\n<span class=\"hljs-comment\">// 检查是昵称是否已经存在</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">HasNickname(<span class=\"hljs-params\">_nickname</span>)</span>{\n    for(var i=<span class=\"hljs-number\">0</span>; i&lt;nickname_list.length; i++){\n        <span class=\"hljs-keyword\">if</span>(nickname_list<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span>_nickname){\n            return <span class=\"hljs-literal\">true</span>;\n        }\n    }\n};\n\n<span class=\"hljs-comment\">// 删除昵称</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">_nickname</span>)</span>{\n    for(var i=<span class=\"hljs-number\">0</span>; i&lt; nickname_list.length; i++){\n        <span class=\"hljs-keyword\">if</span>(nickname_list<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span><span class=\"hljs-operator\"> == </span>_nickname){\n            nickname_list.splice(i, <span class=\"hljs-number\">1</span>);\n        }\n    }\n}\n\nio.on('connection', <span class=\"hljs-keyword\">function</span>(_socket){\n    console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ':connection');\n\n    <span class=\"hljs-comment\">// 向当前用户发送命令和消息</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('user_list', nickname_list);\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('need_nickname');\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('server_message<span class=\"hljs-character\">','</span>欢迎来到聊天室 :)');\n\n    <span class=\"hljs-comment\">// 监听当前用户的请求和数据</span>\n\n    <span class=\"hljs-comment\">// 离开</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('disconnect', <span class=\"hljs-keyword\">function</span><span class=\"hljs-literal\">()</span>{\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ':disconnect');\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != null<span class=\"hljs-operator\"> &amp;&amp; </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != <span class=\"hljs-string\">\"\"</span>){\n            <span class=\"hljs-comment\">// 广播 用户退出</span>\n            <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_quit', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname);\n            <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">_socket</span>.<span class=\"hljs-params\">nickname</span>)</span>;\n        }\n    });\n\n    <span class=\"hljs-comment\">// 添加 和 修改 昵称</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('change_nickname', <span class=\"hljs-keyword\">function</span>(_nickname, clr){\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>id + ': change<span class=\"hljs-constructor\">_nickname('+<span class=\"hljs-params\">_nickname</span>+')</span>');\n\n        _nickname = xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_nickname</span>.<span class=\"hljs-params\">trim</span>()</span>);\n\n        <span class=\"hljs-comment\">// 半角替换为tt，模拟为全角字符判断长度</span>\n        var name_len = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_nickname</span>.</span></span>replace(/<span class=\"hljs-literal\">[^\\<span class=\"hljs-identifier\">u0000</span>-\\<span class=\"hljs-identifier\">u00ff</span>]</span>/g, <span class=\"hljs-string\">\"tt\"</span>).length;\n\n        <span class=\"hljs-comment\">// 字符长度必须在4到16个字符之间</span>\n        <span class=\"hljs-keyword\">if</span>(name_len &lt; <span class=\"hljs-number\">4</span><span class=\"hljs-operator\"> || </span>name_len &gt; <span class=\"hljs-number\">16</span>){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '请填写正确的用户昵称，应在<span class=\"hljs-number\">4</span>到<span class=\"hljs-number\">16</span>个字符之间。')\n        }\n\n        <span class=\"hljs-comment\">// 昵称重复</span>\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname<span class=\"hljs-operator\"> == </span>_nickname){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '你本来就叫这个名字。')\n        }\n\n        <span class=\"hljs-comment\">// 昵称已经被占用</span>\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-constructor\">HasNickname(<span class=\"hljs-params\">_nickname</span>)</span>){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_error', '此昵称已经被占用。')\n        }\n\n        var old_name = '';\n        <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != ''<span class=\"hljs-operator\"> &amp;&amp; </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname != null){\n            old_name = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname;\n            <span class=\"hljs-constructor\">RemoveNickname(<span class=\"hljs-params\">old_name</span>)</span>;\n        }\n\n        nickname_list.push(_nickname);\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname = _nickname;\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color = clr;\n\n        console.log(nickname_list);\n\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('change_nickname_done', old_name, _nickname, clr);\n\n        <span class=\"hljs-keyword\">if</span>(old_name<span class=\"hljs-operator\"> == </span>''){\n            <span class=\"hljs-comment\">// 广播 用户加入</span>\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_join', _nickname);\n        }<span class=\"hljs-keyword\">else</span>{\n            <span class=\"hljs-comment\">// 广播 用户改名</span>\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_change_nickname', old_name, _nickname);\n        }\n    });\n\n    <span class=\"hljs-comment\">// 说话</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('say', <span class=\"hljs-keyword\">function</span>(_time, _content){\n        <span class=\"hljs-keyword\">if</span>(''<span class=\"hljs-operator\"> == </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname<span class=\"hljs-operator\"> || </span>null<span class=\"hljs-operator\"> == </span><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname){\n            return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('need_nickname');\n        }\n\n        _content = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_content</span>.</span></span>trim<span class=\"hljs-literal\">()</span>;\n        var chatinfo = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">ChatModel()</span>;\n        chatinfo.nickname = <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname;\n        chatinfo.time = _time;\n        chatinfo.content = _content;\n        chatinfo.save(<span class=\"hljs-keyword\">function</span>(err) {\n            <span class=\"hljs-keyword\">if</span> (err) throw err;\n        });\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ChatModel</span>.</span></span>find({nickname: <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname},<span class=\"hljs-keyword\">function</span>(err,data) {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.log('存储失败' + err);\n             return;\n             } <span class=\"hljs-keyword\">else</span> {\n             console.log('存储成功：' + data);\n             }\n        });\n        console.log(<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname + ': say('+_content+<span class=\"hljs-character\">')'</span>);\n        <span class=\"hljs-comment\">// 广播 用户新消息</span>\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>broadcast.emit('user_say', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_content</span>)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color);\n        return <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('say_done', <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>nickname, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">_content</span>)</span>, <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>color);\n    });\n\n    <span class=\"hljs-comment\">//显示历史记录</span>\n    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>on('show_history',<span class=\"hljs-keyword\">function</span>(clr){\n        console.log('ok');\n        <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">ChatModel</span>.</span></span>find({},<span class=\"hljs-keyword\">function</span>(err,data) {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.error(err);\n             return;\n             } <span class=\"hljs-keyword\">else</span> {\n                 console.log('data = ' + data);\n                 console.log(data<span class=\"hljs-literal\">[<span class=\"hljs-number\">0</span>]</span>.nickname);\n                 for(var i = <span class=\"hljs-number\">0</span>;i &lt; data.length;i++){\n                    console.log(data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.nickname, data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.time, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">data</span>[<span class=\"hljs-params\">i</span>].<span class=\"hljs-params\">content</span>)</span>, clr);\n                    <span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">_socket</span>.</span></span>emit('return_history', data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.nickname, data<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">i</span>]</span>.time, xss<span class=\"hljs-constructor\">Escape(<span class=\"hljs-params\">data</span>[<span class=\"hljs-params\">i</span>].<span class=\"hljs-params\">content</span>)</span>, clr);\n                }\n             }\n        });\n    });\n})</code></pre>\n<p>这是后端的响应机制，前端逻辑在public目录下js中的index.js中,这里就简单举个例子，显示历史消息：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> chat_Utils,     <span class=\"hljs-comment\">//聊天室 工具类</span>\n    chat_UI,         <span class=\"hljs-comment\">//聊天室 界面逻辑</span>\n    chat_Socket;     <span class=\"hljs-comment\">//聊天室 数据逻辑</span>\n\n<span class=\"hljs-comment\">// 与后台服务器建立websocket连接</span>\n<span class=\"hljs-keyword\">var</span> chat_server = <span class=\"hljs-string\">\"http://\"</span> + location.hostname + <span class=\"hljs-string\">':3000'</span>;\n<span class=\"hljs-keyword\">var</span> socket = io.connect(chat_server);\n\n\nchat_UI = {\n    <span class=\"hljs-attr\">init</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">this</span>.historyShow();        <span class=\"hljs-comment\">//点击显示历史消息事件</span>\n    },\n    <span class=\"hljs-attr\">historyShow</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n            $(<span class=\"hljs-string\">\"#showHistory\"</span>).on(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#history-modal'</span>).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span>) {\n                    $(<span class=\"hljs-string\">'.history-list-body'</span>).empty();\n                }\n                $(<span class=\"hljs-string\">\"#history-modal\"</span>).modal(<span class=\"hljs-string\">'show'</span>);\n                chat_Socket.showHistory(chat_Utils.getUserColor());\n            })\n    },\n    <span class=\"hljs-attr\">chatBodyToBottom</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">var</span> chat_body = $(<span class=\"hljs-string\">'.chat-body'</span>);\n        <span class=\"hljs-keyword\">var</span> height = chat_body.prop(<span class=\"hljs-string\">'scrollHeight'</span>);\n        chat_body.prop(<span class=\"hljs-string\">'scrollTop'</span>, height);\n    },\n    <span class=\"hljs-attr\">addHistoryMessage</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_time, _content, _name, clr</span>)</span>{\n        <span class=\"hljs-keyword\">var</span> history_list = $(<span class=\"hljs-string\">'.history-list-body'</span>);\n        _content = QxEmotion.Parse(_content);\n        <span class=\"hljs-keyword\">var</span> msgAlignCls = _name ==$(<span class=\"hljs-string\">'#my-nickname'</span>).text() ? <span class=\"hljs-string\">'msg-right'</span>:<span class=\"hljs-string\">'msg-left'</span>;\n        history_list.append(\n            <span class=\"hljs-string\">'&lt;div class=\"msg-item clearfix '</span>+msgAlignCls+<span class=\"hljs-string\">'\"&gt;\\\n                    &lt;div class=\"msg-avatar\" style=\"background-color:'</span>+clr+<span class=\"hljs-string\">';\"&gt;&lt;i class=\"glyphicon glyphicon-user\"&gt;&lt;/i&gt;&lt;/div&gt;\\\n                    &lt;div class=\"msg-con-box\" style=\"background-color:'</span>+clr+<span class=\"hljs-string\">';\"&gt;\\\n                        &lt;p class=\"con\"&gt;'</span>+_content+<span class=\"hljs-string\">'&lt;/p&gt;\\\n                        &lt;time class=\"time\"&gt;'</span>+_time+<span class=\"hljs-string\">'&lt;/time&gt;\\\n                    &lt;/div&gt;\\\n                &lt;/div&gt;'</span>\n            );\n        <span class=\"hljs-keyword\">this</span>.chatBodyToBottom();\n\n    },\n};\n\nchat_Socket = {\n    <span class=\"hljs-attr\">init</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        <span class=\"hljs-keyword\">this</span>.chatHistoryEv();<span class=\"hljs-comment\">//监听后端 获取历史消息</span>\n    },\n    <span class=\"hljs-attr\">showHistory</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">clr</span>)</span>{\n        socket.emit(<span class=\"hljs-string\">'show_history'</span>,clr);\n    },\n    <span class=\"hljs-attr\">chatHistoryEv</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n        socket.on(<span class=\"hljs-string\">'return_history'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">_nickname, _time, _content, clr</span>) </span>{\n            <span class=\"hljs-built_in\">console</span>.log(_nickname, _time, _content, clr);\n            chat_UI.addHistoryMessage(_time, _content, _nickname, clr);\n        });\n    },\n}\n\nchat_UI.init();\nchat_Socket.init();</code></pre>\n<p>我们过一下思路，首先当用户点击显示历史消息时，调用chat_UI.historyShow函数，先清空一下历史记录列表，然后显示历史记录弹窗，调用chat_Socket.showHistory函数：</p>\n<pre><code class=\"language-javascript\">historyShow:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n            <span class=\"hljs-keyword\">var</span> self = <span class=\"hljs-keyword\">this</span>;\n            $(<span class=\"hljs-string\">\"#showHistory\"</span>).on(<span class=\"hljs-string\">'click'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n                <span class=\"hljs-keyword\">if</span>($(<span class=\"hljs-string\">'#history-modal'</span>).css(<span class=\"hljs-string\">'display'</span>) == <span class=\"hljs-string\">'none'</span>) {\n                    $(<span class=\"hljs-string\">'.history-list-body'</span>).empty();\n                }\n                $(<span class=\"hljs-string\">\"#history-modal\"</span>).modal(<span class=\"hljs-string\">'show'</span>);\n                chat_Socket.showHistory(chat_Utils.getUserColor());\n            })\n    },</code></pre>\n<p>chat_Socket.showHistory这个函数调用socket.emit发射show_history事件：</p>\n<pre><code class=\"language-javascript\">showHistory:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(clr)</span></span>{\n        socket.emit(<span class=\"hljs-string\">'show_history'</span>,clr);\n    },</code></pre>\n<p>后端chat_server.js 中用socket.on(‘show_history’)捕获了这一事件,从数据库中获取数据发送return_history事件到前端：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-comment\">//显示历史记录</span>\n    _socket.on(<span class=\"hljs-string\">'show_history'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">clr</span>)</span>{\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'ok'</span>);\n        ChatModel.find({},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err,data</span>) </span>{\n            <span class=\"hljs-keyword\">if</span> (err) {\n             <span class=\"hljs-built_in\">console</span>.error(err);\n             <span class=\"hljs-keyword\">return</span>;\n             } <span class=\"hljs-keyword\">else</span> {\n                 <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>;i &lt; data.length;i++){\n                    _socket.emit(<span class=\"hljs-string\">'return_history'</span>, data[i].nickname, data[i].time, xssEscape(data[i].content), clr);\n                }\n             }\n        });\n    });</code></pre>\n<p>前端index.js 中 chat_Socket.chatHistoryEv()函数捕获return_history事件，调用chat_UI.addHistoryMessage添加到历史记录列表中：</p>\n<pre><code class=\"language-javascript\">chatHistoryEv:function(){\n        socket.on(<span class=\"hljs-string\">'return_history'</span>,function(<span class=\"hljs-variable\">_nickname</span>, <span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, clr) {\n            console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-variable\">_nickname</span>, <span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, clr);\n            chat_UI.addHistoryMessage(<span class=\"hljs-variable\">_time</span>, <span class=\"hljs-variable\">_content</span>, <span class=\"hljs-variable\">_nickname</span>, clr);\n        });\n    },</code></pre>\n<p>整个显示历史记录的过程就结束了。</p>\n<h2 id=\"数据库的操作\">数据库的操作</h2>\n<p>前面我们已经设计好了数据库：</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-keyword\">var</span> mongoose = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'mongoose'</span>);\n\n<span class=\"hljs-comment\">//连接数据库</span>\n<span class=\"hljs-keyword\">var</span> db = mongoose.createConnection(<span class=\"hljs-string\">'localhost'</span>,<span class=\"hljs-string\">'chatroom'</span>);\ndb.on(<span class=\"hljs-string\">'error'</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err</span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.error(err);\n});\n<span class=\"hljs-keyword\">var</span> Schema = mongoose.Schema;\n\n<span class=\"hljs-comment\">//聊天记录表</span>\n<span class=\"hljs-keyword\">var</span> ChatSchema = <span class=\"hljs-keyword\">new</span> Schema({\n    <span class=\"hljs-attr\">nickname</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">time</span>: <span class=\"hljs-built_in\">String</span>,\n    <span class=\"hljs-attr\">content</span>: <span class=\"hljs-built_in\">String</span>\n});\n<span class=\"hljs-keyword\">var</span> ChatModel = db.model(<span class=\"hljs-string\">'chats'</span>,ChatSchema);</code></pre>\n<p>数据库的设计包括Schema 模式(数据记录的格式)、Model 编译模型、Documents 文档实例化。上面的代码中我们连接了chatroom数据库，设计了ChatSchema模式，编译了ChatModel 模型，编译好模型后我们创建一条新的记录只需要new一下就行。</p>\n<h3 id=\"保存新数据\">保存新数据</h3>\n<pre><code class=\"language-javascript\">var chatinfo = new ChatModel()<span class=\"hljs-comment\">;</span>\n        chatinfo.nickname = _socket.nickname<span class=\"hljs-comment\">;</span>\n        chatinfo.time = _time<span class=\"hljs-comment\">;</span>\n        chatinfo.content = _content<span class=\"hljs-comment\">;</span>\n        chatinfo.save(function(err) {\n            if (err) throw err<span class=\"hljs-comment\">;</span>\n        })<span class=\"hljs-comment\">;</span></code></pre>\n<h3 id=\"查询数据\">查询数据</h3>\n<pre><code class=\"language-javascript\">ChatModel.<span class=\"hljs-built_in\">find</span>({nickname: _socket.nickname},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">(err,data)</span></span> {\n            <span class=\"hljs-keyword\">if</span> (err) {\n             console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'存储失败'</span> + err);\n             <span class=\"hljs-keyword\">return</span>;\n             } <span class=\"hljs-keyword\">else</span> {\n             console.<span class=\"hljs-built_in\">log</span>(<span class=\"hljs-string\">'存储成功：'</span> + data);\n             }\n        });</code></pre>\n<p>除了.find() 查找所有符合的数据，还有.findOne() 查找一条数据，第二个参数中的data就是返回的数据。</p>\n<p>至此基本的逻辑和操作我们都了解了，接下来就是Codeing的时间了！</p>\n<h2 id=\"部署到vps上\">部署到vps上</h2>\n<p>将项目搬到/var/www/chatroom/下，这里我是用git传到github上然后git clone过去的。</p>\n<h3 id=\"安装mongodb服务\">安装mongodb服务</h3>\n<p>由于我的vps是32位的CentOS，一直很头痛这个32位还有CentOS,但是里面又配置了一些梯子，不想折腾就没换，连Docker也用不了。。。那怎么安装mongodb呢？</p>\n<p>参考：<a href=\"http://www.thinksaas.cn/topics/0/424/424694.html\">CentOS 6.5系统中使用yum安装MongoDB 2.6 教程</a></p>\n<h4 id=\"创建mongodbrepo文件\">创建mongodb.repo文件</h4>\n<p>在/etc/yum.repos.d/目录下创建文件mongodb.repo，它包含MongoDB仓库的配置信息，内容如下：</p>\n<pre><code><span class=\"hljs-section\">[mongodb]</span>\n<span class=\"hljs-attr\">name</span>=MongoDB Repository\n<span class=\"hljs-attr\">baseurl</span>=http://downloads-distro.mongodb.org/repo/redhat/os/i686/\n<span class=\"hljs-attr\">gpgcheck</span>=<span class=\"hljs-number\">0</span>\n<span class=\"hljs-attr\">enabled</span>=<span class=\"hljs-number\">1</span></code></pre><h4 id=\"执行安装命令\">执行安装命令</h4>\n<pre><code>sudo yum <span class=\"hljs-keyword\">install</span> mongodb-org</code></pre><h4 id=\"启动mongodb\">启动MongoDB</h4>\n<pre><code>sudo<span class=\"hljs-built_in\"> service </span>mongod start</code></pre><h3 id=\"运行appjs\">运行app.js</h3>\n<p>切换到项目目录，为了能一直自行程序，我们用forever模块：</p>\n<pre><code>sudo npm -g install <span class=\"hljs-keyword\">forever</span> <span class=\"hljs-comment\"> //安装</span>\n\n<span class=\"hljs-keyword\">forever</span> <span class=\"hljs-built_in\">start</span> app.js         <span class=\"hljs-comment\"> //开启进程</span>\n\n<span class=\"hljs-keyword\">forever</span> list                 <span class=\"hljs-comment\"> //查看所有进程</span>\n\n<span class=\"hljs-keyword\">forever</span> stopall                <span class=\"hljs-comment\"> //关闭所有进程</span>\n</code></pre><p>现在在你服务器的3000端口我们的聊天室已经完美运行了！</p>\n","title":"用Express + Socket.io + MongoDB实现简易聊天室","tags":["用Express","Socket.io","MongoDB"],"slug":"simple-chat-room-with-express-%2B-socket.io-%2B-mongodb","createDate":1462086345088,"id":"simple-chat-room-with-express-%2B-socket.io-%2B-mongodb","thumb":"https://images.unsplash.com/photo-1582020738577-2e7a48043902?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>最近玩node需要用到MongoDB数据库，试过各种方法终于配置好了，记录下来防坑。</p>\n","content":"<p>最近玩node需要用到MongoDB数据库，试过各种方法终于配置好了，记录下来防坑。</p>\n<h2 id=\"下载\">下载</h2>\n<p>官网地址：<a href=\"http://www.mongodb.org/downloads\">http://www.mongodb.org/downloads</a></p>\n<h2 id=\"安装\">安装</h2>\n<p>无论是压缩包还是安装程序，都可以放在你想放的位置，然后在目录下建立DB目录存储数据库和Log目录记录日志</p>\n<pre><code><span class=\"hljs-bullet\">- </span>bin\n<span class=\"hljs-bullet\">- </span>DB\n<span class=\"hljs-bullet\">- </span>Log\n...</code></pre><h2 id=\"安装成系统服务\">安装成系统服务</h2>\n<p>在目录下建立mongo.conf和mongo.cfg</p>\n<p>mongo.conf:</p>\n<pre><code><span class=\"hljs-symbol\">storage:</span>\n<span class=\"hljs-symbol\">   dbPath:</span> <span class=\"hljs-string\">\"C:\\MongoDB\\DB\"</span></code></pre><p>mongo.cfg:</p>\n<pre><code>logpath=C:<span class=\"hljs-symbol\">\\M</span>ongoDB<span class=\"hljs-symbol\">\\L</span>og<span class=\"hljs-symbol\">\\m</span>ongo.log</code></pre><p>然后cmd切换到bin目录下，运行：</p>\n<pre><code>mongod.exe <span class=\"hljs-params\">--config</span> <span class=\"hljs-string\">\"C:\\MongoDB\\mongo.cfg\"</span> <span class=\"hljs-params\">--install</span></code></pre><p>这样就安装好了，要启动mongodb服务只需要输入：</p>\n<pre><code><span class=\"hljs-built_in\">net</span> <span class=\"hljs-built_in\">start</span> mongodb</code></pre><p>会提示MongoDB 服务已经启动成功。</p>\n<p>然后再输入<code>mongo</code>即可进入shell环境。</p>\n","title":"win7 安装 mongodb","tags":["MongoDB","win7"],"slug":"install-mongodb-on-win7","createDate":1461998526384,"id":"install-mongodb-on-win7","thumb":"https://images.unsplash.com/flagged/photo-1580232629990-f94c97e83bf2?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>寒假将过，感觉不能荒废了，要找点事做，于是整理了一下这个。</p>\n<p>额，先<a href=\"http://weibo.com/p/1001593933059845084440?from=singleweibo&amp;mod=recommand_article&amp;sudaref=www.baidu.com\">介绍一下freecodecamp</a>吧：</p>\n<p>FreeCodeCamp 是一个基于 MEAN 架构的开源社区，它可以帮助人们学习编程以及构建他们的非盈利项目，内容以前端为主。</p>\n","content":"<p>寒假将过，感觉不能荒废了，要找点事做，于是整理了一下这个。</p>\n<p>额，先<a href=\"http://weibo.com/p/1001593933059845084440?from=singleweibo&amp;mod=recommand_article&amp;sudaref=www.baidu.com\">介绍一下freecodecamp</a>吧：</p>\n<p>FreeCodeCamp 是一个基于 MEAN 架构的开源社区，它可以帮助人们学习编程以及构建他们的非盈利项目，内容以前端为主。</p>\n<p>在GitHub上，FreeCodeCamp拥有超过5万Star， 而且还在持续增长之中，对于大多数项目而言，增加一个Star也不容易。2015年，在《软件开发时代》杂志(SD Times)总结的GitHub优秀项目中，FreeCodeCamp名列前十。目前，该社区有7159次代码提交和250个代码贡献者。</p>\n<p>如此神奇的一个开源项目，到底有哪些优势呢？</p>\n<p>1.学习编程技能，比如HTML5、CSS3、JavaScript、数据库、Git、Node.js、Angular.js和敏捷开发。</p>\n<p>3.从事自由和开源项目。</p>\n<p>5.获得实时帮助。</p>\n<p>下面进入正题。</p>\n<h2 id=\"html5-and-css\">HTML5 and CSS</h2>\n<h3 id=\"1-say-hello-to-html-elements\">1. Say Hello to HTML Elements</h3>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span></code></pre><h3 id=\"2-headline-with-the-h2-element\">2. Headline with the h2 Element</h3>\n<p>添加一个h2元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span></code></pre><h3 id=\"3-inform-with-the-paragraph-element\">3. Inform with the Paragraph Element</h3>\n<p>添加一个p元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1\\</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p\\</span>&gt;</span>Hello Paragraph<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p\\</span>&gt;</span></code></pre><h3 id=\"4-uncomment-html\">4. Uncomment HTML</h3>\n<p>取消注释：</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--\n&lt;h1&gt;Hello World&lt;/h1&gt;\n\n&lt;h2&gt;CatPhotoApp&lt;/h2&gt;\n\n&lt;p&gt;Hello Paragraph&lt;/p&gt;\n\\--&gt;</span></code></pre><pre><code>去掉`<span class=\"hljs-comment\">&lt;!--`和`--&gt;</span>`即可。</code></pre><h3 id=\"5-comment-out-html\">5. Comment out HTML</h3>\n<p>注释h1和p：</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--\n&lt;h1&gt;Hello World&lt;/h1&gt;\n\\--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2\\</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2\\</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!--\n&lt;p&gt;Hello Paragraph&lt;/p&gt;\n\\--&gt;</span></code></pre><h3 id=\"6-fill-in-the-blank-with-placeholder-text\">6. Fill in the Blank with Placeholder Text</h3>\n<p>把那段红色段落复制粘贴到p元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p\\</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p\\</span>&gt;</span></code></pre><h3 id=\"7-delete-html-elements\">7. Delete HTML Elements</h3>\n<p>删除h1元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"8-change-the-color-of-text\">8. Change the Color of Text</h3>\n<p>啊哈，进入CSS的部分了==\n给h2上红色：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">\"color: red\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"9-use-css-selectors-to-style-elements\">9. Use CSS Selectors to Style Elements</h3>\n<p>这里删掉h2元素里的style，创建style元素，并为h2设置color属性为blue(然而例子中给的是red，还要自己修改一下- -！)</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">h2</span> {<span class=\"hljs-attribute\">color</span>:blue;}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"10-use-a-css-class-to-style-an-element\">10. Use a CSS Class to Style an Element</h3>\n<p>给h2加个class属性，在style元素里吧h2换成.red-text，blue换成red：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.red-text</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span>`</code></pre><h3 id=\"11-style-multiple-elements-with-a-css-class\">11. Style Multiple Elements with a CSS Class</h3>\n<p>给<code>&lt;p&gt;</code>加一个red-text的class属性</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.red-text</span> {\n    <span class=\"hljs-attribute\">color</span>: red;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"12-change-the-font-size-of-an-element\">12. Change the Font Size of an Element</h3>\n<p>设置字体大小font-size，没啥好说的</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">p</span> {\n    <span class=\"hljs-attribute\">font-size</span>:<span class=\"hljs-number\">16px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"13-set-the-font-family-of-an-element\">13. Set the Font Family of an Element</h3>\n<p>设置字体font-family：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n  <span class=\"hljs-selector-tag\">p</span> {\n    <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">16px</span>;\n    <span class=\"hljs-attribute\">font-family</span>:Monospace;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>Kitty ipsum dolor sit amet, shed everywhere shed everywhere stretching attack your ankles chase the red dot, hairball run catnip eat the grass sniff.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Purr jump eat the grass rip the couch scratched sunbathe, shed everywhere rip the couch sleep in the sink fluffy fur catnip scratched.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"14-import-a-google-font\">14. Import a Google Font</h3>\n<p>设置Lobster字体</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://fonts.googleapis.com/css?family=Lobster\"</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">h2</span> {\n    <span class=\"hljs-attribute\">font-family</span>:Lobster;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"15-specify-how-fonts-should-degrade\">15. Specify How Fonts Should Degrade</h3>\n<p>设置字体降级,注释掉Google字体的请求，观察变化</p>\n<pre><code><span class=\"hljs-comment\">&lt;!--&lt;link href=\"http://fonts.googleapis.com/css?family=Lobster\" rel=\"stylesheet\" type=\"text/css\"&gt;--&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n  <span class=\"hljs-selector-tag\">h2</span> {\n    <span class=\"hljs-attribute\">font-family</span>: Lobster, Monospace;\n  }\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h2</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"red-text\"</span>&gt;</span>CatPhotoApp<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h2</span>&gt;</span></code></pre><h3 id=\"16-add-images-to-your-website\">16. Add Images to your Website</h3>\n<p>添加图片：</p>\n<pre><code>&lt;img <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</code></pre><h3 id=\"17-size-your-images\">17. Size your Images</h3>\n<p>设置图片大小：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"18-add-borders-around-your-elements\">18. Add Borders Around your Elements</h3>\n<p>添加边线：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>:<span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>:solid;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"19-add-rounded-corners-with-a-border-radius\">19. Add Rounded Corners with a Border Radius</h3>\n<p>添加圆角border-radius：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">10px</span>;\n  }\n\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"20-make-circular-images-with-a-border-radius\">20. Make Circular Images with a Border Radius</h3>\n<p>制作圆形图片：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-class\">.thick-green-border</span> {\n    <span class=\"hljs-attribute\">border-color</span>: green;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">10px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;\n  }\n  <span class=\"hljs-selector-class\">.smaller-image</span> {\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;</span></code></pre><h3 id=\"21-link-to-external-pages-with-anchor-elements\">21. Link to External Pages with Anchor Elements</h3>\n<p>设置链接：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://freecatphotoapp.com\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span></code></pre><h3 id=\"22-nest-an-anchor-element-within-a-paragraph\">22. Nest an Anchor Element within a Paragraph</h3>\n<p>使用嵌套：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>View more <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://www.freecatphotoapp.com\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></code></pre><h3 id=\"23-make-dead-links-using-the-hash-symbol\">23. Make Dead Links using the Hash Symbol</h3>\n<p>死链接：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Click here for <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;</span>cat photos<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>.<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre><h3 id=\"24-turn-an-image-into-a-link\"><a href=\"#24-_Turn_an_Image_into_a_Link\" title=\"24. Turn an Image into a Link\"></a>24. Turn an Image into a Link</h3>\n<p>把图片变成链接：</p>\n<pre><code>&lt;a <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;&lt;img <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span>&gt;&lt;/a&gt;</code></pre><h3 id=\"25-add-alt-text-to-an-image-for-accessibility\">25. Add Alt Text to an Image for Accessibility</h3>\n<p>给图片添加alt属性：</p>\n<pre><code>&lt;a <span class=\"hljs-attribute\">href</span>=<span class=\"hljs-string\">\"#\"</span>&gt;&lt;img <span class=\"hljs-attribute\">class</span>=<span class=\"hljs-string\">\"smaller-image thick-green-border\"</span> <span class=\"hljs-attribute\">src</span>=<span class=\"hljs-string\">\"https://bit.ly/fcc-relaxing-cat\"</span> <span class=\"hljs-attribute\">alt</span>=<span class=\"hljs-string\">\"A cute orange cat lying on its back\"</span>&gt;&lt;/a&gt;</code></pre><h3 id=\"26-create-a-bulleted-unordered-list\">26. Create a Bulleted Unordered List</h3>\n<p>创建子弹无序列表(中文是这样吗？好吧是项目符号无序列表),删除两个<code>&lt;p&gt;</code>，列表是三个cat喜欢的东西。</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>milk<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>cheese<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>girl<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span></code></pre><h3 id=\"27-create-an-ordered-list\">27. Create an Ordered List</h3>\n<p>创建一个有序列表，内容是三个cat讨厌的东西:</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>boy<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>gays<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>html<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span></code></pre><h3 id=\"28-create-a-text-field\">28. Create a Text Field</h3>\n<p>创建一个文本字段：</p>\n<pre><code>&lt;input <span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span></span>=<span class=\"hljs-string\">\"text\"</span>&gt;</code></pre><h3 id=\"29-add-placeholder-text-to-a-text-field\">29. Add Placeholder Text to a Text Field</h3>\n<p>添加占位文本到一个文本字段:</p>\n<pre><code>&lt;input <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attribute\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;</code></pre><h3 id=\"30-create-a-form-element\">30. Create a Form Element</h3>\n<p>创建一个表单元素,嵌套input元素:</p>\n<pre><code>&lt;form <span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;&lt;input <span class=\"hljs-attribute\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attribute\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;&lt;/form&gt;</code></pre><h3 id=\"31-add-a-submit-button-to-a-form\">31. Add a Submit Button to a Form</h3>\n<p>为表单添加提交按钮：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><h3 id=\"32-use-html5-to-require-a-field\">32. Use HTML5 to Require a Field</h3>\n<p>使用HTML5需要一个字段(required):</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">form</span> <span class=\"hljs-attr\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"cat photo URL\"</span> <span class=\"hljs-attr\">required</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">form</span>&gt;</span></code></pre><h3 id=\"33-create-a-set-of-radio-buttons\">33. Create a Set of Radio Buttons</h3>\n<p>设置单选框：</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;&lt;/<span class=\"hljs-keyword\">br</span>&gt;\n&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;</code></pre><h3 id=\"34-create-a-set-of-checkboxes\">34. Create a Set of Checkboxes</h3>\n<p>设置复选框：</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">form</span> action=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"text\"</span> placeholder=<span class=\"hljs-string\">\"cat photo URL\"</span> required&gt;\n  &lt;button <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"submit\"</span>&gt;Submit&lt;/button&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span>&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n&lt;/<span class=\"hljs-keyword\">form</span>&gt;</code></pre><h3 id=\"35-check-radio-buttons-and-checkboxes-by-default\">35. Check Radio Buttons and Checkboxes by Default</h3>\n<p>检查默认单选按钮和复选框(第一个单选和复选添加checked):</p>\n<pre><code>&lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span> checked&gt; Indoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"radio\"</span> name=<span class=\"hljs-string\">\"indoor-outdoor\"</span>&gt; Outdoor&lt;/<span class=\"hljs-keyword\">label</span>&gt;\n  &lt;<span class=\"hljs-keyword\">label</span>&gt;&lt;<span class=\"hljs-keyword\">input</span> <span class=\"hljs-keyword\">type</span>=<span class=\"hljs-string\">\"checkbox\"</span> name=<span class=\"hljs-string\">\"personality\"</span> checked&gt; Loving&lt;/<span class=\"hljs-keyword\">label</span>&gt;</code></pre><h3 id=\"36-nest-many-elements-within-a-single-div-element\">36. Nest Many Elements within a Single Div Element</h3>\n<p>用简单的div元素嵌套一些元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Things cats love:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>cat nip<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>laser pointers<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>lasagna<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Top 3 things cats hate:<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ol</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>flea treatment<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>thunder<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>&gt;</span>other cats<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ol</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></code></pre><h3 id=\"37-give-a-background-color-to-a-div-element\">37. Give a Background Color to a Div Element</h3>\n<p>为div元素设置背景色：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.gray-background</span>{\n    <span class=\"hljs-attribute\">background-color</span>:gray;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"gray-background\"</span>&gt;</span></code></pre><h3 id=\"38-set-the-id-of-an-element\">38. Set the ID of an Element</h3>\n<p>为元素设置id：</p>\n<pre><code>&lt;form <span class=\"hljs-attribute\">id</span>=<span class=\"hljs-string\">\"cat-photo-form\"</span> <span class=\"hljs-attribute\">action</span>=<span class=\"hljs-string\">\"/submit-cat-photo\"</span>&gt;</code></pre><h3 id=\"39-use-an-id-attribute-to-style-an-element\">39. Use an ID Attribute to Style an Element</h3>\n<p>使用ID属性设计元素：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-id\">#cat-photo-form</span> {\n    <span class=\"hljs-attribute\">background-color</span>:green;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"40-adjusting-the-padding-of-an-element\">40. Adjusting the Padding of an Element</h3>\n<p>设置内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"41-adjust-the-margin-of-an-element\">41. Adjust the Margin of an Element</h3>\n<p>设置内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">20px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"43-add-a-negative-margin-to-an-element\">43. Add a Negative Margin to an Element</h3>\n<p>设置负的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin</span>: -<span class=\"hljs-number\">15px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"44-add-different-padding-to-each-side-of-an-element\">44. Add Different Padding to Each Side of an Element</h3>\n<p>为元素的每一边添加不同的内边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding-top</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">padding-right</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">padding-bottom</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">padding-left</span>: <span class=\"hljs-number\">40px</span>;\n  }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"45-add-different-margins-to-each-side-of-an-element\">45. Add Different Margins to Each Side of an Element</h3>\n<p>为元素的每一边添加不同的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">40px</span>;\n    <span class=\"hljs-attribute\">margin-right</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin-bottom</span>: <span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">margin-left</span>: <span class=\"hljs-number\">40px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"46-use-clockwise-notation-to-specify-the-padding-of-an-element\">46. Use Clockwise Notation to Specify the Padding of an Element</h3>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">40px</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"47-use-clockwise-notation-to-specify-the-margin-of-an-element\">47. Use Clockwise Notation to Specify the Margin of an Element</h3>\n<p>用顺时针符号来指定一个元素的外边距：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.green-box</span> {\n    <span class=\"hljs-attribute\">background-color</span>: green;\n    <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">40px</span>;\n  }\n&lt;<span class=\"hljs-selector-tag\">style</span>&gt;</span></code></pre><h3 id=\"48-style-the-html-body-element\">48. Style the HTML Body Element</h3>\n<p>设计html body元素的样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-color</span>: black;\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"49-inherit-styles-from-the-body-element\">49. Inherit Styles from the Body Element</h3>\n<p>从body元素继承样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">color</span>: green;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n  }\n\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></code></pre><h3 id=\"50-prioritize-one-style-over-another\">50. Prioritize One Style Over Another</h3>\n<p>优先考虑一个样式：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n    <span class=\"hljs-attribute\">color</span>: green;\n  }\n  <span class=\"hljs-selector-class\">.pink-text</span>{\n    <span class=\"hljs-attribute\">color</span>:pink;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"pink-text\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></code></pre><h3 id=\"51-override-styles-in-subsequent-css\">51. Override Styles in Subsequent CSS</h3>\n<p>在后来的CSS中覆盖样式,注释中的样式跟未注释的一样：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: black;\n    <span class=\"hljs-attribute\">font-family</span>: Monospace;\n    <span class=\"hljs-attribute\">color</span>: green;\n  }\n  <span class=\"hljs-selector-class\">.pink-text</span> {\n    <span class=\"hljs-attribute\">color</span>: pink;\n  }\n  <span class=\"hljs-selector-class\">.blue-text</span>{\n    <span class=\"hljs-attribute\">color</span>:blue;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"blue-text pink-text\"</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- &lt;h1 class=\"pink-text blue-text\"&gt;Hello World!&lt;/h1&gt; --&gt;</span></code></pre><h3 id=\"52-override-class-declarations-by-styling-id-attributes\">52. Override Class Declarations by Styling ID Attributes</h3>\n<p>用ID属性式样覆盖类声明(英语不好。。。)：</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n\n<span class=\"hljs-selector-id\">#orange-text</span> {\n    <span class=\"hljs-attribute\">color</span>:orange;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"53-override-class-declarations-with-inline-styles\">53. Override Class Declarations with Inline Styles</h3>\n<p>用内联样式覆盖类声明：</p>\n<pre><code>&lt;h1 id=<span class=\"hljs-string\">\"orange-text\"</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"pink-text blue-text\"</span> style=<span class=\"hljs-string\">\"color:white\"</span>&gt;Hello World!<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span></span></code></pre><h3 id=\"54-override-all-other-styles-by-using-important\">54. Override All Other Styles by using Important</h3>\n<p>使用 important 覆盖其他所有样式</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-class\">.pink-text</span> {\n    <span class=\"hljs-attribute\">color</span>: pink <span class=\"hljs-meta\">!important</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"55-use-hex-code-for-specific-colors\">55. Use Hex Code for Specific Colors</h3>\n<p>为特殊的颜色使用十六进制代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n<span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#000</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"56-use-hex-code-to-color-elements-white\">56. Use Hex Code to Color Elements White</h3>\n<p>使用十六进制的白色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#fff</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"57-use-hex-code-to-color-elements-red\">57. Use Hex Code to Color Elements Red</h3>\n<p>使用十六进制的红色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#FF0000</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"58-use-hex-code-to-color-elements-green\">58. Use Hex Code to Color Elements Green</h3>\n<p>使用十六进制的绿色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#00FF00</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"59-use-hex-code-to-color-elements-blue\">59. Use Hex Code to Color Elements Blue</h3>\n<p>使用十六进制的蓝色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#0000FF</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"60-use-hex-code-to-mix-colors\">60. Use Hex Code to Mix Colors</h3>\n<p>使用十六进制代码混合颜色</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#FFA500</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"61-use-hex-code-to-color-elements-gray\">61. Use Hex Code to Color Elements Gray</h3>\n<p>使用十六进制的灰色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#808080</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"62-use-hex-code-for-specific-shades-of-gray\">62. Use Hex Code for Specific Shades of Gray</h3>\n<p>使用十六进制代码为了特殊灰度的灰色</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#111111</span>;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"63-use-abbreviated-hex-code\">63. Use Abbreviated Hex Code</h3>\n<p>使用缩写十六进制代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#F00</span> ;\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"64-use-rgb-values-to-color-elements\">64. Use RGB values to Color Elements</h3>\n<p>使用RGB值颜色元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 0, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"65-use-rgb-to-color-elements-white\">65. Use RGB to Color Elements White</h3>\n<p>使用RGB颜色白色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>:  <span class=\"hljs-built_in\">rgb</span>(255, 255, 255);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"66-use-rgb-to-color-elements-red\">66. Use RGB to Color Elements Red</h3>\n<p>使用RGB颜色红色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 0, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"67-use-rgb-to-color-elements-green\">67. Use RGB to Color Elements Green</h3>\n<p>使用RGB 颜色绿色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 255, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"68-use-rgb-to-color-elements-blue\">68. Use RGB to Color Elements Blue</h3>\n<p>使用RGB 颜色蓝色的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(0, 0, 255);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h3 id=\"69-use-rgb-to-mix-colors\">69. Use RGB to Mix Colors</h3>\n<p>使用RGB 颜色混合的元素</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n  <span class=\"hljs-selector-tag\">body</span> {\n    <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-built_in\">rgb</span>(255, 165, 0);\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span></code></pre><h2 id=\"basic-javascript\">Basic JavaScript</h2>\n<h3 id=\"1-comment-your-javascript-code\">1. Comment your JavaScript Code</h3>\n<p>注释你的Javascript代码</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Script</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// This is an in-line comment.</span>\n<span class=\"hljs-comment\">/* This is a\n   multi-line comment */</span>\n   </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Script</span>&gt;</span></code></pre><h3 id=\"2-declare-javascript-variables\">2. Declare JavaScript Variables</h3>\n<p>声明JavaScript变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Script</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Define myName below this line</span>\n\n<span class=\"hljs-keyword\">var</span> myName;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Script</span>&gt;</span></code></pre><h3 id=\"3-storing-values-with-the-equal-operator\">3. Storing Values with the Equal Operator</h3>\n<p>用=存储值</p>\n<pre><code>&lt;Script&gt;\n// Only change code below this line\n<span class=\"hljs-attribute\">a</span> = <span class=\"hljs-number\">7</span><span class=\"hljs-comment\">;</span>\n<span class=\"hljs-attribute\">b</span> = a<span class=\"hljs-comment\">;</span>\n&lt;/Script&gt;</code></pre><h3 id=\"4-initializing-variables-with-the-equal-operator\">4. Initializing Variables with the Equal Operator</h3>\n<p>用= 初始化变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Only change code below this line</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">9</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h3 id=\"5-understanding-uninitialized-variables\">5. Understanding Uninitialized Variables</h3>\n<p>了解未初始化变量</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/javascript\"</span>&gt;</span><span class=\"actionscript\">\n<span class=\"hljs-comment\">// Initialize these three variables</span>\n<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">5</span>;\n<span class=\"hljs-keyword\">var</span> b = <span class=\"hljs-number\">10</span>;\n<span class=\"hljs-keyword\">var</span> c = <span class=\"hljs-string\">\"I am a\"</span>;\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre><h3 id=\"6\">6.</h3>\n","title":"FreeCodeCamp学习笔记","tags":["FreeCodeCamp"],"slug":"free-code-camp","createDate":1458883963258,"id":"free-code-camp","thumb":"https://images.unsplash.com/photo-1582246915745-10e34377da98?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>昨晚在床上发现有学习笔记，也想写一个分享一下，写点什么呢？鉴于有不少人是初次接触Git，干脆就说说这个吧，我只会一些基本的操作，大神可以自动忽略。</p>\n","content":"<p>昨晚在床上发现有学习笔记，也想写一个分享一下，写点什么呢？鉴于有不少人是初次接触Git，干脆就说说这个吧，我只会一些基本的操作，大神可以自动忽略。</p>\n<h3 id=\"关于github\">关于github</h3>\n<p>什么是github(全球最大的同性交友平台，没有性别歧视==)呢？\n说白了就是一个仓库，你可以把你的代码放在一个小仓库上，别人也把他们的代码放在一个小仓库上，然后这些小仓库就组成了github，我们可以在里面互相串门，看到喜欢的人可以follow，看到喜欢的项目可以star或者fork。看到这，你是否迫不及待想有一个自己的仓库来保存你成果丰硕的代码呢？去<a href=\"https://github.com/\">官网</a>注册一个账号吧。</p>\n<h3 id=\"关于git\">关于Git</h3>\n<p>那么怎么把代码上传到github的仓库上呢？</p>\n<h4 id=\"1、首先我们在github上要建立一个仓库\">1、首先我们在github上要建立一个仓库</h4>\n<p>我们进入自己的官网，可以看见右上角头像左边有个加号,点击选择new repository</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymc2ulnuj309h04y3yn.jpg\" alt=\"\"></p>\n<p>进入这样一个页面，填一下名字和描述，然后点击左下角的Creat</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymenjrv4j30lj0fhq5w.jpg\" alt=\"\"></p>\n<p>然后进入这样一个页面，这表示这个仓库空空如也，需要我们上传东西，接下来就要用到Git喽，没有Git的去<a href=\"https://git-scm.com/downloads\">官网</a>下一个吧.图中箭头所指的就是我们新建的这个github仓库的地址，方框中的就是我们一会要用到的git命令。</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymkab7fkj30o90hgwjf.jpg\" alt=\"\"></p>\n<p>好，现在我们在桌面新建一个文件夹，里面放了我们要上传的代码，安装好git后鼠标右键会有一个Git Bash here，点击出现一个熟悉的黑框框</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ymvjn5hnj30il0goq8z.jpg\" alt=\"\"></p>\n<p><code>git init</code> 就是初始化一下，我们会发现文件夹里多了一个<code>.git</code>的隐藏文件，这个不要随便改。<code>git add</code>就是把本机文件添加进去 <code>git add .</code>就是添加所有的意思。添加完了就要提交了，<code>git commit -m &quot;&quot;</code>,-m就是message的意思，后面的双引号里写上这次提交的信息。<code>git remote add ...</code>添加远程服务器，名字可以随便，地址就是你git仓库的地址，添加一次以后就不用再添加了。然后就是<code>git push 远程服务器名字 分支</code>，分支一般是master主分支。回车后会让你输入github账号和密码。可以使用 <a href=\"https://git-scm.com/docs/gitcredentials\">credential helper</a>来避免每次提交都要输入密码，如何配置可以参见：<a href=\"https://help.github.com/articles/caching-your-github-password-in-git/\">https://help.github.com/articles/caching-your-github-password-in-git/</a>.</p>\n<pre><code><span class=\"hljs-symbol\">XIAO555@</span>XIAO555-PC MINGW64 ~/Desktop/新建文件夹 (master)\n$ git push origin master\nCounting objects: <span class=\"hljs-number\">3</span>, done.\nDelta compression using up to <span class=\"hljs-number\">4</span> threads.\nCompressing objects: <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">2</span>/<span class=\"hljs-number\">2</span>), done.\nWriting objects: <span class=\"hljs-number\">100</span>% (<span class=\"hljs-number\">3</span>/<span class=\"hljs-number\">3</span>), <span class=\"hljs-number\">1.23</span> KiB | <span class=\"hljs-number\">0</span> bytes/s, done.\nTotal <span class=\"hljs-number\">3</span> (delta <span class=\"hljs-number\">0</span>), reused <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>)\nTo https:<span class=\"hljs-comment\">//github.com/xiao555/example.git</span>\n * [new branch]      master -&gt; master</code></pre><p>这样就表示上传完成了，回到你的github上看看吧。</p>\n<p><a href=\"http://ww3.sinaimg.cn/mw1024/005NJVkbjw1f1ynaltri1j30sg0ar41g.jpg\"><img src=\"http://ww3.sinaimg.cn/mw1024/005NJVkbjw1f1ynaltri1j30sg0ar41g.jpg\" alt=\"\"></a></p>\n<p>大功告成！咦，要是我们在本地修改了代码要同步到github上怎么办？没关系，继续下列步骤：</p>\n<pre><code><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add </span>. //会显示有几个改动\n<span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">\"...\"</span>\n<span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push </span>origin master</code></pre><h3 id=\"关于github-pages\">关于github pages</h3>\n<p>我想让我的代码可以在线演示怎么办？用Github Pages。让我们回到git bash那个黑框框，进行如下操作：</p>\n<pre><code>XIAO555<span class=\"hljs-meta\">@XIAO</span>555-PC MINGW64 <span class=\"hljs-regexp\">~/Desktop/</span>新建文件夹 (master)\n$ git checkout -b gh-pages\nSwitched to a <span class=\"hljs-keyword\">new</span> branch <span class=\"hljs-string\">'gh-pages'</span>\n<span class=\"hljs-comment\">//创建名为gh-pages的分支</span>\n\nXIAO555<span class=\"hljs-meta\">@XIAO</span>555-PC MINGW64 <span class=\"hljs-regexp\">~/Desktop/</span>新建文件夹 (gh-pages)\n$ git push origin gh-pages\nTotal <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>), reused <span class=\"hljs-number\">0</span> (delta <span class=\"hljs-number\">0</span>)\nTo <span class=\"hljs-string\">https:</span><span class=\"hljs-comment\">//github.com/xiao555/example.git</span>\n * [<span class=\"hljs-keyword\">new</span> branch]      gh-pages -&gt; gh-pages\n<span class=\"hljs-comment\">//上传到gh-pages分支</span></code></pre><p>我们这时候回到github上刷新一下，会发现这里多了gh-pages的分支</p>\n<p><img src=\"https://xiao555.netlify.com/005NJVkbjw1f1ynooepmdj30en0erwgg.jpg\" alt=\"\"></p>\n<p>我们的文件也在这个分支上。github pages需要index.html文件，我在本地新建了一个上传到gh-pages分支上，内容是 <code>Hello!</code>.然后我们进入这个链接：<a href=\"http://xiao555.github.io/example/\">http://xiao555.github.io/example/</a>,这不就是刚上传的那个index.html吗，</p>\n<p>关于github pages具体可以参考<a href=\"https://help.github.com/categories/github-pages-basics/\">这个</a>.</p>\n<p>哈哈，到这里就结束了，不过git使用过程中会遇到一些奇怪的问题，大家可以百度，找我也行.</p>\n","title":"关于Git 和 Github 以及Git pages","tags":["git","github","git-pages"],"slug":"about-git-github-and-git-pages","createDate":1458108281766,"id":"about-git-github-and-git-pages","thumb":"https://images.unsplash.com/photo-1580956990950-81503947e9f8?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"content":"<p>很早以前就想搭一个博客了，三个月前为了翻越伟大的防火墙，去搬瓦工买了个vps，配了个shadowsocks。既然有了vps，当然也希望搞个博客，这个寒假在家没事就开工了。</p>\n<p>之前一直不清楚搭一个博客需要啥，所以用了<a href=\"https://hexo.io/zh-cn/\">hexo</a>这个静态博客系统。</p>\n<p>我的vps系统是Centos 6 x86。\n本机是windows7.</p>\n<h2 id=\"搭建过程\">搭建过程</h2>\n<p>搭建过程分两部分，需要在本机和服务端都安装Hexo和Git，VPS上还需要安装Nginx服务器，配置Git Hooks。</p>\n<h3 id=\"本机1\">本机1</h3>\n<h4 id=\"装git\">装Git</h4>\n<p>下载<a href=\"https://git-scm.com/download/win\">Git for windows</a>，一路默认安装</p>\n<h4 id=\"安装nodejs\">安装Node.js</h4>\n<p>在<a href=\"https://nodejs.org/en/\">Node.js</a>官网下载最新版，一路默认安装</p>\n<h4 id=\"创建网站目录\">创建网站目录</h4>\n<p>在你电脑的任意位置创建一个文件夹（我的是D:\\blog，下文以此代替），作为网站目录。</p>\n<h4 id=\"安装hexo\">安装Hexo</h4>\n<p>打开你创建的网站目录，右键git bash here打开命令行。</p>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$npm</span> install -g hexo-cli</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> init</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$npm</span> install</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> d -fg</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> serve</span></code></pre><p>打开<a href=\"http://localhost:4000\">http://localhost:4000</a> 如果看到hexo的初始页面证明安装成功。</p>\n<p>PS:在我的电脑上4000貌似被占了，如果要改端口的话：</p>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$hexo</span> serve -p ****</span></code></pre><h4 id=\"配置git\">配置Git</h4>\n<p>在网站目录git bash，执行</p>\n<pre><code><span class=\"hljs-variable\">$ </span>git init\n<span class=\"hljs-variable\">$ </span>git add .\n<span class=\"hljs-variable\">$ </span>git commit -m <span class=\"hljs-string\">\"Initial commit\"</span></code></pre><p>我们还要给他加个插件\n$npm install hexo-deployer-git –save</p>\n<h4 id=\"生成ssh密钥\">生成ssh密钥</h4>\n<p>输入命令 <code>ssh-keygen -t rsa -C “blog”</code> ,生成公钥和私钥，打开生成密钥的文件夹，找到id_rsa.pub。</p>\n<h3 id=\"vpscentos-6\">VPS(CentOS 6)</h3>\n<p>我们选择Git仓库+Git Hooks作为服务器端的解决方案.\nPS:我操作的用户是root，因为这样可以方便点.</p>\n<h4 id=\"安装git\">安装Git</h4>\n<pre><code>yum update &amp;&amp; apt-<span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> upgrade </span>-y #更新内核\nyum install git-core</code></pre><h4 id=\"git仓库\">Git仓库</h4>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~\nmkdir blog.git &amp;&amp; <span class=\"hljs-keyword\">cd</span> blog.git <span class=\"hljs-comment\">#创建GIT仓库目录</span>\ngit init <span class=\"hljs-params\">--bare</span> <span class=\"hljs-comment\">#初始化一个空仓库</span></code></pre><h4 id=\"ssh公钥配置\">SSH公钥配置</h4>\n<p>为了本机不登录自动部署</p>\n<pre><code><span class=\"hljs-keyword\">cd</span> ~\nmkdir <span class=\"hljs-string\">.ssh</span> &amp;&amp; <span class=\"hljs-keyword\">cd</span> <span class=\"hljs-string\">.ssh</span>\nvim authorized_keys</code></pre><p>然后把id_rsa.pub里的那一串复制过去。</p>\n<p>本机Git Bash里实验一下</p>\n<pre><code><span class=\"hljs-selector-tag\">ssh</span> <span class=\"hljs-selector-tag\">username</span>@<span class=\"hljs-keyword\">yourVps</span>(<span class=\"hljs-keyword\">IP</span> Or URL)</code></pre><p>如果配置成功的话不用输入密码就会登陆。</p>\n<h4 id=\"配置本机hexo\">配置本机Hexo</h4>\n<p>设置git用户名</p>\n<pre><code>$ git<span class=\"hljs-built_in\"> config </span>--global user.email <span class=\"hljs-string\">\"email@example.com\"</span>\n$ git<span class=\"hljs-built_in\"> config </span>--global user.name <span class=\"hljs-string\">\"username\"</span></code></pre><p>配置站点目录里的_config.yml</p>\n<pre><code><span class=\"hljs-meta\"># Deployment</span>\n<span class=\"hljs-meta\"># Docs: https:<span class=\"hljs-comment\">//hexo.io/docs/deployment.html</span></span>\n<span class=\"hljs-symbol\">deploy:</span>\n<span class=\"hljs-symbol\">  type:</span> git\n<span class=\"hljs-symbol\">  message:</span> update\n<span class=\"hljs-symbol\">  repo:</span> root@YOURVPSIP:blog.git\n<span class=\"hljs-symbol\">  branch:</span> master</code></pre><p>这应该是单用户的设置，多用户请自行google,基本是</p>\n<pre><code><span class=\"hljs-attribute\">repo</span>:\n  <span class=\"hljs-attribute\">s1</span>: root<span class=\"hljs-variable\">@YOURVPSIP</span>:blog.git,master</code></pre><p>运行 <code>hexo g &amp;&amp; hexo d</code>，如果一切正常，静态文件已经被成功的push到了blog的仓库里</p>\n<p>PS:注意配置文件的冒号 ： 后面一定要有空格</p>\n<h4 id=\"配置nginx\">配置Nginx</h4>\n<h5 id=\"安装nginx和nodejs\">安装Nginx和Node.js</h5>\n<pre><code><span class=\"hljs-variable\">$yum</span> update &amp;&amp; apt-<span class=\"hljs-builtin-name\">get</span><span class=\"hljs-built_in\"> upgrade </span>-y #更新内核\n<span class=\"hljs-variable\">$yun</span> install nodejs -y\n<span class=\"hljs-variable\">$yum</span> install nginx -y\n<span class=\"hljs-variable\">$cd</span> /etc/nginx/conf.d/\n<span class=\"hljs-variable\">$vi</span> default.conf</code></pre><p>我这里为了方便直接改默认配置文件了，其他博客一般介绍新建一个vhost的方法。</p>\n<pre><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> IP:<span class=\"hljs-number\">80</span> ;\n    <span class=\"hljs-attribute\">root</span> /var/www/blog;  <span class=\"hljs-comment\"># 这里是你网站的路径 路径下包含index.html等一系列文件</span>\n    <span class=\"hljs-attribute\">server_name</span> _;   <span class=\"hljs-comment\"># 如果没有域名就像我这样写，有域名就写域名</span>\n    <span class=\"hljs-attribute\">access_log</span>  /var/log/nginx/example_access.log;\n    <span class=\"hljs-attribute\">error_log</span>   /var/log/nginx/example_error.log;\n    <span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~* ^.+\\.(ico|gif|jpg|jpeg|png)$</span> {\n            <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n            <span class=\"hljs-attribute\">access_log</span>   <span class=\"hljs-literal\">off</span>;\n            <span class=\"hljs-attribute\">expires</span>      <span class=\"hljs-number\">1d</span>;\n        }\n    <span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~* ^.+\\.(css|js|txt|xml|swf|wav)$</span> {\n        <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n        <span class=\"hljs-attribute\">access_log</span>   <span class=\"hljs-literal\">off</span>;\n        <span class=\"hljs-attribute\">expires</span>      <span class=\"hljs-number\">10m</span>;\n    }\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">root</span> /var/www/example.com/public;\n        <span class=\"hljs-attribute\">if</span> (-f <span class=\"hljs-variable\">$request_filename</span>) {\n            <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^/(.*)$</span>  /<span class=\"hljs-variable\">$1</span> <span class=\"hljs-literal\">break</span>;\n        }\n    }\n}</code></pre><h5 id=\"创建目录-分配权限\">创建目录 分配权限</h5>\n<pre><code><span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$cd</span> /var/www</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$mkdir</span> blog</span>\n<span class=\"hljs-meta\"><span class=\"hljs-meta-keyword\">$chmod</span> 775 -R /var/www/blog</span></code></pre><p>顺便初始化一下仓库</p>\n<pre><code><span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">init</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">remote add origin ~/blog.git</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">fetch</span>\n<span class=\"hljs-attr\">git</span> <span class=\"hljs-string\">checkout master</span></code></pre><h5 id=\"运行nginx\">运行Nginx</h5>\n<pre><code>$<span class=\"hljs-regexp\">/etc/i</span>nit.d<span class=\"hljs-regexp\">/nginx restart</span></code></pre><h4 id=\"配置-git-hooks\">配置 Git Hooks</h4>\n<p>这个是不同于网上搜的大多数方法的git hooks配置，因为他们那种方法我用不成功==</p>\n<pre><code><span class=\"hljs-attr\">cd</span> <span class=\"hljs-string\">~/blog.git/hooks</span>\n<span class=\"hljs-attr\">touch</span> <span class=\"hljs-string\">post-receive</span>\n<span class=\"hljs-attr\">vi</span> <span class=\"hljs-string\">post-receive</span></code></pre><p>配置如下</p>\n<pre><code><span class=\"hljs-meta\">#!/bin/sh\n</span>\n<span class=\"hljs-built_in\">unset</span> GIT_DIR\n\nNowPath=`<span class=\"hljs-built_in\">pwd</span>`\nDeployPath=<span class=\"hljs-string\">\"/var/www/blog\"</span>\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DeployPath</span>\ngit pull origin master\n\n<span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$NowPath</span>\n<span class=\"hljs-built_in\">exit</span> 0</code></pre><p>更改权限</p>\n<pre><code><span class=\"hljs-variable\">$ </span>chmod +x post-receive</code></pre><p>到这里就配置ok了，回到本机站点目录git bash测试一下，可以略作修改，比如换一下标题 <code>title: Xiao555</code>,然后</p>\n<pre><code>hexo g <span class=\"hljs-meta\">&amp;&amp; hexo d</span></code></pre><p>从浏览器打开你的网站或者服务器的ip看看是否成功。\n当然，每次更新完都要写这行虽然不多但是还有感觉有点麻烦，在这里我们可以给Git配置一下，编辑~/.bashrc文件，没有会加上：</p>\n<pre><code>vim ~<span class=\"hljs-string\">/.bashrc</span></code></pre><p>编辑内容：</p>\n<pre><code><span class=\"hljs-keyword\">alias</span> blog='<span class=\"hljs-keyword\">cd</span> D:<span class=\"hljs-string\">/blog</span>;hexo g &amp;&amp; hexo d'</code></pre><p>cd 后面是你的本机站点目录。保存并退出，再运行(不然不生效）：</p>\n<pre><code><span class=\"hljs-built_in\">source</span> ~/.bashrc</code></pre><p>这样以后写完一篇文章要更新只需要直接打开git bash输入blog就可以了。</p>\n<p>至于hexo站点的配置，参照官网就好。这里添加一项就是站点配置文件里的<code>auto_detect: false</code>要改为true，否则代码块行号只有1，其他为空白：</p>\n<p><img src=\"https://xiao555.netlify.com/codebug.png\" alt=\"\"></p>\n<p>啊，突然发现写个博客好难啊，记性不好怕写得不对，有错误还希望读者多多指出，参考资料基本就是你能google到的那些有关的博文，就不一一列举了,主要的区别就是git hooks的。</p>\n","title":"在vps上搭建hexo博客用Git Hooks 更新","tags":["vps","hexo","blog","git-hooks"],"slug":"set-up-a-hexo-blog-on-vps-and-update-it-with-git-hooks","createDate":1457431802283,"id":"set-up-a-hexo-blog-on-vps-and-update-it-with-git-hooks","thumb":"https://images.unsplash.com/photo-1581252167648-643051a9433e?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>在这刚开学不久的，舍友们都无忧无虑的玩着游戏的时候，我的心情很不爽。这是为什么呢？因为我要补考！！！</p>\n","content":"<p>在这刚开学不久的，舍友们都无忧无虑的玩着游戏的时候，我的心情很不爽。这是为什么呢？因为我要补考！！！</p>\n<p>而在我默默准备补考的时候，正在进行着各大公司的春招工作，看着大三的学长学姐们都在积极地找内推，投简历，面试。我感到很不是滋味。这又是为什么呢？且听我娓娓道来：</p>\n<p>当我刚从东部沿海来到内陆的西电时，我在所谓的技术上完全是个小白，不懂什么是C语言，什么是html，什么是js。后来，参加雁塔E6的招新面试时，学长问我知道什么是web吗？我当时一脸懵逼啊，但是为了碰碰运气，我很没底气的说“外包?” 阿西吧，我现在能想象当时学长会怎么想，呵呵。于是学长跟我讲解了html的故事，于是我知道了有个叫w3school的东西，于是我在当时大一不允许带电脑的情况下毅然买了我的Dell游戏本开始学习html，css，js。在这个过程中我发现了许多有趣的东西。我尝试着做个人网站，但是页面写的一塌糊涂，让人不忍直视，哈哈。于是有自知之明的我去网上找别人的网页，然后试着改成我的(好无耻)，这是当时的<a href=\"http://1.jianli2015.applinzi.com/\">作品</a>(链接在左边)，很简陋有没有。哎，当时懵懂的我想以后就学这个了，吃前端的饭，加油，努力奋斗！！</p>\n<p>然而，真相是：上课睡觉，晚上LOL，然后上床扣手机，周末也是LOL。虽然有点夸张，我只是想表达感觉大一一年跟大二上学期基本都在游戏中荒废了。</p>\n<p>啊，少年你的理想呢？我们的征途是星辰大海啊！！看看周围那些努力奋斗的人，看看科协努力学技术的那群人，再看看你自己，这样对得起你的人生吗！！</p>\n<p>确实很多时候都感到没有学好一项技能，毕业后找不到工作，前途渺茫。本来就没有妹子相伴，以后穷困潦倒的时候去哪找你的颜如玉啊。\n其实我之前是想大二结束那个暑假出去找一份实习，但是现在看来，我需要学的还有很多，完全达不到人家的要求啊。</p>\n<p>哎，好吧，纯粹是无病呻吟。就是今天感觉心情沉重，脑子里想的都是这些，然后总想写点啥。然而好久没上语文的我早已失去了当初的50+的作文水平。</p>\n<p>言归正传，我觉得自己还有救。那就做个计划吧。这学期好好学js。今天看知乎的时候看到一个学习计划感觉不错的样子，摘抄如下：</p>\n<pre><code><span class=\"hljs-number\">1</span>、 css、html (ES5，ES2015，ES2016)遵循标准来学习。\n<span class=\"hljs-number\">2</span>、 http、socket等网络层协议。\n<span class=\"hljs-number\">3</span>、 数据结构和算法。\n<span class=\"hljs-number\">4</span>、 设计模式。这里不建议为了设计而学习，多了解，多思考。\n<span class=\"hljs-number\">5</span>、 项目(可能是锻炼？)抽象、建模、分层的能力。\n\n总之，代码尽可能不重复，易读易维护易扩展。\n\n软能力：\n<span class=\"hljs-number\">1</span>、 沟通能力\n<span class=\"hljs-number\">2</span>、 推动项目可执行，有反馈\n<span class=\"hljs-number\">3</span>、 提高英语能力\n<span class=\"hljs-number\">4</span>、 锻炼出自己的学习方法\n\n<span class=\"hljs-keyword\">final</span>：暑假有能力找到一份实习工作！（自己加的）\nao，对了，还有一条：每天尽量少熬夜啊骚年！</code></pre><p>好吧，骚年努力吧，既然已经戒撸，那就承担起你应该担负的责任，努力学习前端吧！(咦，有点似曾相识啊==！)</p>\n","title":"日记——2016.3.3","tags":["日记"],"slug":"diary-2016.3.3","createDate":1457018816993,"id":"diary-2016.3.3","thumb":"https://images.unsplash.com/photo-1581623301138-42e3513ddbf2?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"content":"<p>本教程适用于CentOS 6</p>\n<h2 id=\"安装pptp\">安装pptp</h2>\n<pre><code>wget --<span class=\"hljs-keyword\">no</span>-check-certificate http<span class=\"hljs-variable\">s:</span>//raw.githubusercontent.<span class=\"hljs-keyword\">com</span>/teddysun/across/master/pptp.<span class=\"hljs-keyword\">sh</span>\nchmod +<span class=\"hljs-keyword\">x</span> pptp.<span class=\"hljs-keyword\">sh</span>\n./pptp.<span class=\"hljs-keyword\">sh</span></code></pre><p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/258.png\">http://www.bandwagong.com/wp-content/uploads/2015/04/258.png</a></p>\n<p>安装成功后，会有相应信息</p>\n<p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/259.jpg\">http://www.bandwagong.com/wp-content/uploads/2015/04/259.jpg</a></p>\n<p>增加一个新用户，删除用户，修改密码等可以使用编辑：</p>\n<pre><code>vi <span class=\"hljs-regexp\">/etc/</span>ppp<span class=\"hljs-regexp\">/chap-secrets</span></code></pre><p>按i 编辑，格式如下：</p>\n<pre><code>vpn pptpd <span class=\"hljs-number\">123456</span> *\n<span class=\"hljs-meta\">#vpn 用户名</span>\n<span class=\"hljs-meta\">#123456 密码</span>\n<span class=\"hljs-meta\">#pptpd 和 * 不变，字符中间必须用一个空格隔开。数字123，选用键盘字母键上方，不要用数字小键盘</span></code></pre><p><a href=\"http://www.bandwagong.com/wp-content/uploads/2015/04/230.jpg\">http://www.bandwagong.com/wp-content/uploads/2015/04/230.jpg</a></p>\n<p>如上输入完成，按下键盘左上方ESC键盘，英文状态下输入 “：”再输入字母 wq ，回车即保存好了。\n现在只要电脑设置好，就可以自由的畅享网络了。</p>\n<p>参考文章：<a href=\"http://www.bandwagong.com/pptpd-vpn/\">http://www.bandwagong.com/pptpd-vpn/</a></p>\n","title":"搬瓦工VPS pptpd VPN配置","tags":["vps","pptpd","vpn"],"slug":"bandwagonhost-pptpd-vpn","createDate":1455155301793,"id":"bandwagonhost-pptpd-vpn","thumb":"https://images.unsplash.com/photo-1581626274639-07cb175d188d?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"},{"intro":"<p>本文适用于CentOS 6 系统\nshadowsocks客户端下载链接：<a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n","content":"<p>本文适用于CentOS 6 系统\nshadowsocks客户端下载链接：<a href=\"http://sourceforge.net/projects/shadowsocksgui/files/dist/\">http://sourceforge.net/projects/shadowsocksgui/files/dist/</a></p>\n<h2 id=\"安装shadowsocks\">安装shadowsocks</h2>\n<p>root用户运行：</p>\n<pre><code>wget --<span class=\"hljs-keyword\">no</span>-check-certificate http://www.bandwagong.<span class=\"hljs-keyword\">com</span>/vps/ss.<span class=\"hljs-keyword\">sh</span>\nchmod +<span class=\"hljs-keyword\">x</span> ss.<span class=\"hljs-keyword\">sh</span>\n./ss.<span class=\"hljs-keyword\">sh</span> <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span> | tee shadowsocks.<span class=\"hljs-built_in\">log</span></code></pre><p>安装完成后，提示如下：</p>\n<pre><code>Congratulations, shadowsocks install completed!\nYour Server IP:your_server_ip\nYour Server Port:<span class=\"hljs-number\">443</span>\nYour Password:your_password\nYour Local IP:<span class=\"hljs-number\">127.0</span>.<span class=\"hljs-number\">0.1</span>\nYour Local Port:<span class=\"hljs-number\">1080</span>\nYour Encryption <span class=\"hljs-function\"><span class=\"hljs-keyword\">Method</span>:</span>aes-<span class=\"hljs-number\">256</span>-cfb\n\nWelcome <span class=\"hljs-keyword\">to</span> visit:http:<span class=\"hljs-comment\">//www.bandwagong.com</span>\nEnjoy it!</code></pre><h2 id=\"卸载方法\">卸载方法</h2>\n<p>root用户运行：</p>\n<pre><code><span class=\"hljs-string\">./ss.sh</span> uninstall</code></pre><p>#单用户配置文件</p>\n<p>配置文件路径：/etc/shadowsocks.json</p>\n<pre><code>{\n    <span class=\"hljs-attr\">\"server\"</span>:<span class=\"hljs-string\">\"your_server_ip\"</span>,\n    <span class=\"hljs-attr\">\"server_port\"</span>:<span class=\"hljs-number\">443</span>,\n    <span class=\"hljs-attr\">\"local_address\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"local_port\"</span>:<span class=\"hljs-number\">1080</span>,\n    <span class=\"hljs-attr\">\"password\"</span>:<span class=\"hljs-string\">\"yourpassword\"</span>,\n    <span class=\"hljs-attr\">\"timeout\"</span>:<span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">\"method\"</span>:<span class=\"hljs-string\">\"aes-256-cfb\"</span>,\n    <span class=\"hljs-attr\">\"fast_open\"</span>: <span class=\"hljs-literal\">false</span>\n}</code></pre><h2 id=\"多用户多端口配置文件\">多用户多端口配置文件</h2>\n<p>配置文件路径：/etc/shadowsocks.json</p>\n<pre><code>{\n    <span class=\"hljs-attr\">\"server\"</span>:<span class=\"hljs-string\">\"your_server_ip\"</span>,\n    <span class=\"hljs-attr\">\"local_address\"</span>:<span class=\"hljs-string\">\"127.0.0.1\"</span>,\n    <span class=\"hljs-attr\">\"local_port\"</span>:<span class=\"hljs-number\">1080</span>,\n    <span class=\"hljs-attr\">\"port_password\"</span>:{\n         <span class=\"hljs-attr\">\"8989\"</span>:<span class=\"hljs-string\">\"password0\"</span>,\n         <span class=\"hljs-attr\">\"9001\"</span>:<span class=\"hljs-string\">\"password1\"</span>,\n         <span class=\"hljs-attr\">\"9002\"</span>:<span class=\"hljs-string\">\"password2\"</span>,\n         <span class=\"hljs-attr\">\"9003\"</span>:<span class=\"hljs-string\">\"password3\"</span>,\n         <span class=\"hljs-attr\">\"9004\"</span>:<span class=\"hljs-string\">\"password4\"</span>\n    },\n    <span class=\"hljs-attr\">\"timeout\"</span>:<span class=\"hljs-number\">300</span>,\n    <span class=\"hljs-attr\">\"method\"</span>:<span class=\"hljs-string\">\"aes-256-cfb\"</span>,\n    <span class=\"hljs-attr\">\"fast_open\"</span>: <span class=\"hljs-literal\">false</span>\n}</code></pre><h2 id=\"使用命令\">使用命令</h2>\n<p>启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status</p>\n","title":"搬瓦工VPS shadowsocks配置","tags":["vps","shadowsocks"],"slug":"bandwagonhost-vps-shadowsocks","createDate":1455155263549,"id":"bandwagonhost-vps-shadowsocks","thumb":"https://images.unsplash.com/photo-1581508525322-f5d437639ff9?ixlib=rb-1.2.1&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&ixid=eyJhcHBfaWQiOjEwNTE3MH0"}]